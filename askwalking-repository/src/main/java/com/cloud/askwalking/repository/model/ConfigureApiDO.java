package com.cloud.askwalking.repository.model;

import java.io.Serializable;
import java.util.Date;

public class ConfigureApiDO implements Serializable {
    /**
     * 主键
     * 表字段 : gw_configure_api.id
     */
    private String id;

    /**
     * 应用名称
     * 表字段 : gw_configure_api.application_name
     */
    private String applicationName;

    /**
     * 协议：RPC或FEIGN
     * 表字段 : gw_configure_api.protocol
     */
    private String protocol;

    /**
     * 内容类型，默认：application/json
     * 表字段 : gw_configure_api.content_type
     */
    private String contentType;

    /**
     * 可选：API:(外部接口)和ADMIN:(管理后台接口)
     * 表字段 : gw_configure_api.api_type
     */
    private String apiType;

    /**
     * 通过URI映射不同的dubbo service此不可重复
     * 表字段 : gw_configure_api.request_uri
     */
    private String requestUri;

    /**
     * 验证是否是正常请求并通过不同请求获取参数
     * 表字段 : gw_configure_api.request_method
     */
    private String requestMethod;

    /**
     * service类地址:com.awservice.openapi.service.TestService
     * 表字段 : gw_configure_api.api_interface
     */
    private String apiInterface;

    /**
     * 接口版本默认 1.0.0
     * 表字段 : gw_configure_api.api_version
     */
    private String apiVersion;

    /**
     * 请求对象:com.awservice.account.AddAccountRequest
     * 表字段 : gw_configure_api.api_request_class
     */
    private String apiRequestClass;

    /**
     * 方法名:test
     * 表字段 : gw_configure_api.api_method
     */
    private String apiMethod;

    /**
     * 分组，指定dubbo分组通过不同分组区分调用
     * 表字段 : gw_configure_api.api_group
     */
    private String apiGroup;

    /**
     * 接口名称：描述字段
     * 表字段 : gw_configure_api.api_name
     */
    private String apiName;

    /**
     * 是否异步调用： 0：同步 1:异步
     * 表字段 : gw_configure_api.api_async
     */
    private Boolean apiAsync;

    /**
     * Api是否支持重新加载 0：不支持 1：支持
     * 表字段 : gw_configure_api.api_reload
     */
    private Boolean apiReload;

    /**
     * 报文，当status为0时直接响应报文
     * 表字段 : gw_configure_api.mock_response
     */
    private String mockResponse;

    /**
     * 是否开启系统保护 0：开启 1：不开启 默认不开启
     * 表字段 : gw_configure_api.system_guard
     */
    private Integer systemGuard;

    /**
     * 限流类型：1：系统限流目前不做 2：api限流
     * 表字段 : gw_configure_api.flow_control_rule_type
     */
    private Integer flowControlRuleType;

    /**
     * 系统qps,每秒请求数
     * 表字段 : gw_configure_api.qps
     */
    private Float qps;

    /**
     * 平均响应时间,ms为单位
     * 表字段 : gw_configure_api.avg_rt
     */
    private Long avgRt;

    /**
     * 入口流量的最大并发数
     * 表字段 : gw_configure_api.max_thread
     */
    private Long maxThread;

    /**
     * 0:不校验，1：校验
     * 表字段 : gw_configure_api.sign_check
     */
    private Integer signCheck;

    /**
     * 0：mock_response报文，1：待发布，2：已发布
     * 表字段 : gw_configure_api.status
     */
    private Integer status;

    /**
     * 0-未删除,1-已删除
     * 表字段 : gw_configure_api.delete_flag
     */
    private Boolean deleteFlag;

    /**
     * 操作人
     * 表字段 : gw_configure_api.operator
     */
    private String operator;

    /**
     * 更新时间
     * 表字段 : gw_configure_api.update_time
     */
    private Date updateTime;

    /**
     * 创建时间
     * 表字段 : gw_configure_api.create_time
     */
    private Date createTime;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table gw_configure_api
     *
     * @mbggenerated
     */
    private static final long serialVersionUID = 1L;

    /**
     * 获取 主键 字段:gw_configure_api.id
     *
     * @return gw_configure_api.id, 主键
     */
    public String getId() {
        return id;
    }

    /**
     * 设置 主键 字段:gw_configure_api.id
     *
     * @param id the value for gw_configure_api.id, 主键
     */
    public void setId(String id) {
        this.id = id == null ? null : id.trim();
    }

    /**
     * 获取 应用名称 字段:gw_configure_api.application_name
     *
     * @return gw_configure_api.application_name, 应用名称
     */
    public String getApplicationName() {
        return applicationName;
    }

    /**
     * 设置 应用名称 字段:gw_configure_api.application_name
     *
     * @param applicationName the value for gw_configure_api.application_name, 应用名称
     */
    public void setApplicationName(String applicationName) {
        this.applicationName = applicationName == null ? null : applicationName.trim();
    }

    /**
     * 获取 协议：RPC或FEIGN 字段:gw_configure_api.protocol
     *
     * @return gw_configure_api.protocol, 协议：RPC或FEIGN
     */
    public String getProtocol() {
        return protocol;
    }

    /**
     * 设置 协议：RPC或FEIGN 字段:gw_configure_api.protocol
     *
     * @param protocol the value for gw_configure_api.protocol, 协议：RPC或FEIGN
     */
    public void setProtocol(String protocol) {
        this.protocol = protocol == null ? null : protocol.trim();
    }

    /**
     * 获取 内容类型，默认：application/json 字段:gw_configure_api.content_type
     *
     * @return gw_configure_api.content_type, 内容类型，默认：application/json
     */
    public String getContentType() {
        return contentType;
    }

    /**
     * 设置 内容类型，默认：application/json 字段:gw_configure_api.content_type
     *
     * @param contentType the value for gw_configure_api.content_type, 内容类型，默认：application/json
     */
    public void setContentType(String contentType) {
        this.contentType = contentType == null ? null : contentType.trim();
    }

    /**
     * 获取 可选：API:(外部接口)和ADMIN:(管理后台接口) 字段:gw_configure_api.api_type
     *
     * @return gw_configure_api.api_type, 可选：API:(外部接口)和ADMIN:(管理后台接口)
     */
    public String getApiType() {
        return apiType;
    }

    /**
     * 设置 可选：API:(外部接口)和ADMIN:(管理后台接口) 字段:gw_configure_api.api_type
     *
     * @param apiType the value for gw_configure_api.api_type, 可选：API:(外部接口)和ADMIN:(管理后台接口)
     */
    public void setApiType(String apiType) {
        this.apiType = apiType == null ? null : apiType.trim();
    }

    /**
     * 获取 通过URI映射不同的dubbo service此不可重复 字段:gw_configure_api.request_uri
     *
     * @return gw_configure_api.request_uri, 通过URI映射不同的dubbo service此不可重复
     */
    public String getRequestUri() {
        return requestUri;
    }

    /**
     * 设置 通过URI映射不同的dubbo service此不可重复 字段:gw_configure_api.request_uri
     *
     * @param requestUri the value for gw_configure_api.request_uri, 通过URI映射不同的dubbo service此不可重复
     */
    public void setRequestUri(String requestUri) {
        this.requestUri = requestUri == null ? null : requestUri.trim();
    }

    /**
     * 获取 验证是否是正常请求并通过不同请求获取参数 字段:gw_configure_api.request_method
     *
     * @return gw_configure_api.request_method, 验证是否是正常请求并通过不同请求获取参数
     */
    public String getRequestMethod() {
        return requestMethod;
    }

    /**
     * 设置 验证是否是正常请求并通过不同请求获取参数 字段:gw_configure_api.request_method
     *
     * @param requestMethod the value for gw_configure_api.request_method, 验证是否是正常请求并通过不同请求获取参数
     */
    public void setRequestMethod(String requestMethod) {
        this.requestMethod = requestMethod == null ? null : requestMethod.trim();
    }

    /**
     * 获取 service类地址:com.awservice.openapi.service.TestService 字段:gw_configure_api.api_interface
     *
     * @return gw_configure_api.api_interface, service类地址:com.awservice.openapi.service.TestService
     */
    public String getApiInterface() {
        return apiInterface;
    }

    /**
     * 设置 service类地址:com.awservice.openapi.service.TestService 字段:gw_configure_api.api_interface
     *
     * @param apiInterface the value for gw_configure_api.api_interface, service类地址:com.awservice.openapi.service.TestService
     */
    public void setApiInterface(String apiInterface) {
        this.apiInterface = apiInterface == null ? null : apiInterface.trim();
    }

    /**
     * 获取 接口版本默认 1.0.0 字段:gw_configure_api.api_version
     *
     * @return gw_configure_api.api_version, 接口版本默认 1.0.0
     */
    public String getApiVersion() {
        return apiVersion;
    }

    /**
     * 设置 接口版本默认 1.0.0 字段:gw_configure_api.api_version
     *
     * @param apiVersion the value for gw_configure_api.api_version, 接口版本默认 1.0.0
     */
    public void setApiVersion(String apiVersion) {
        this.apiVersion = apiVersion == null ? null : apiVersion.trim();
    }

    /**
     * 获取 请求对象:com.awservice.account.AddAccountRequest 字段:gw_configure_api.api_request_class
     *
     * @return gw_configure_api.api_request_class, 请求对象:com.awservice.account.AddAccountRequest
     */
    public String getApiRequestClass() {
        return apiRequestClass;
    }

    /**
     * 设置 请求对象:com.awservice.account.AddAccountRequest 字段:gw_configure_api.api_request_class
     *
     * @param apiRequestClass the value for gw_configure_api.api_request_class, 请求对象:com.awservice.account.AddAccountRequest
     */
    public void setApiRequestClass(String apiRequestClass) {
        this.apiRequestClass = apiRequestClass == null ? null : apiRequestClass.trim();
    }

    /**
     * 获取 方法名:test 字段:gw_configure_api.api_method
     *
     * @return gw_configure_api.api_method, 方法名:test
     */
    public String getApiMethod() {
        return apiMethod;
    }

    /**
     * 设置 方法名:test 字段:gw_configure_api.api_method
     *
     * @param apiMethod the value for gw_configure_api.api_method, 方法名:test
     */
    public void setApiMethod(String apiMethod) {
        this.apiMethod = apiMethod == null ? null : apiMethod.trim();
    }

    /**
     * 获取 分组，指定dubbo分组通过不同分组区分调用 字段:gw_configure_api.api_group
     *
     * @return gw_configure_api.api_group, 分组，指定dubbo分组通过不同分组区分调用
     */
    public String getApiGroup() {
        return apiGroup;
    }

    /**
     * 设置 分组，指定dubbo分组通过不同分组区分调用 字段:gw_configure_api.api_group
     *
     * @param apiGroup the value for gw_configure_api.api_group, 分组，指定dubbo分组通过不同分组区分调用
     */
    public void setApiGroup(String apiGroup) {
        this.apiGroup = apiGroup == null ? null : apiGroup.trim();
    }

    /**
     * 获取 接口名称：描述字段 字段:gw_configure_api.api_name
     *
     * @return gw_configure_api.api_name, 接口名称：描述字段
     */
    public String getApiName() {
        return apiName;
    }

    /**
     * 设置 接口名称：描述字段 字段:gw_configure_api.api_name
     *
     * @param apiName the value for gw_configure_api.api_name, 接口名称：描述字段
     */
    public void setApiName(String apiName) {
        this.apiName = apiName == null ? null : apiName.trim();
    }

    /**
     * 获取 是否异步调用： 0：同步 1:异步 字段:gw_configure_api.api_async
     *
     * @return gw_configure_api.api_async, 是否异步调用： 0：同步 1:异步
     */
    public Boolean getApiAsync() {
        return apiAsync;
    }

    /**
     * 设置 是否异步调用： 0：同步 1:异步 字段:gw_configure_api.api_async
     *
     * @param apiAsync the value for gw_configure_api.api_async, 是否异步调用： 0：同步 1:异步
     */
    public void setApiAsync(Boolean apiAsync) {
        this.apiAsync = apiAsync;
    }

    /**
     * 获取 Api是否支持重新加载 0：不支持 1：支持 字段:gw_configure_api.api_reload
     *
     * @return gw_configure_api.api_reload, Api是否支持重新加载 0：不支持 1：支持
     */
    public Boolean getApiReload() {
        return apiReload;
    }

    /**
     * 设置 Api是否支持重新加载 0：不支持 1：支持 字段:gw_configure_api.api_reload
     *
     * @param apiReload the value for gw_configure_api.api_reload, Api是否支持重新加载 0：不支持 1：支持
     */
    public void setApiReload(Boolean apiReload) {
        this.apiReload = apiReload;
    }

    /**
     * 获取 报文，当status为0时直接响应报文 字段:gw_configure_api.mock_response
     *
     * @return gw_configure_api.mock_response, 报文，当status为0时直接响应报文
     */
    public String getMockResponse() {
        return mockResponse;
    }

    /**
     * 设置 报文，当status为0时直接响应报文 字段:gw_configure_api.mock_response
     *
     * @param mockResponse the value for gw_configure_api.mock_response, 报文，当status为0时直接响应报文
     */
    public void setMockResponse(String mockResponse) {
        this.mockResponse = mockResponse == null ? null : mockResponse.trim();
    }

    /**
     * 获取 是否开启系统保护 0：开启 1：不开启 默认不开启 字段:gw_configure_api.system_guard
     *
     * @return gw_configure_api.system_guard, 是否开启系统保护 0：开启 1：不开启 默认不开启
     */
    public Integer getSystemGuard() {
        return systemGuard;
    }

    /**
     * 设置 是否开启系统保护 0：开启 1：不开启 默认不开启 字段:gw_configure_api.system_guard
     *
     * @param systemGuard the value for gw_configure_api.system_guard, 是否开启系统保护 0：开启 1：不开启 默认不开启
     */
    public void setSystemGuard(Integer systemGuard) {
        this.systemGuard = systemGuard;
    }

    /**
     * 获取 限流类型：1：系统限流目前不做 2：api限流 字段:gw_configure_api.flow_control_rule_type
     *
     * @return gw_configure_api.flow_control_rule_type, 限流类型：1：系统限流目前不做 2：api限流
     */
    public Integer getFlowControlRuleType() {
        return flowControlRuleType;
    }

    /**
     * 设置 限流类型：1：系统限流目前不做 2：api限流 字段:gw_configure_api.flow_control_rule_type
     *
     * @param flowControlRuleType the value for gw_configure_api.flow_control_rule_type, 限流类型：1：系统限流目前不做 2：api限流
     */
    public void setFlowControlRuleType(Integer flowControlRuleType) {
        this.flowControlRuleType = flowControlRuleType;
    }

    /**
     * 获取 系统qps,每秒请求数 字段:gw_configure_api.qps
     *
     * @return gw_configure_api.qps, 系统qps,每秒请求数
     */
    public Float getQps() {
        return qps;
    }

    /**
     * 设置 系统qps,每秒请求数 字段:gw_configure_api.qps
     *
     * @param qps the value for gw_configure_api.qps, 系统qps,每秒请求数
     */
    public void setQps(Float qps) {
        this.qps = qps;
    }

    /**
     * 获取 平均响应时间,ms为单位 字段:gw_configure_api.avg_rt
     *
     * @return gw_configure_api.avg_rt, 平均响应时间,ms为单位
     */
    public Long getAvgRt() {
        return avgRt;
    }

    /**
     * 设置 平均响应时间,ms为单位 字段:gw_configure_api.avg_rt
     *
     * @param avgRt the value for gw_configure_api.avg_rt, 平均响应时间,ms为单位
     */
    public void setAvgRt(Long avgRt) {
        this.avgRt = avgRt;
    }

    /**
     * 获取 入口流量的最大并发数 字段:gw_configure_api.max_thread
     *
     * @return gw_configure_api.max_thread, 入口流量的最大并发数
     */
    public Long getMaxThread() {
        return maxThread;
    }

    /**
     * 设置 入口流量的最大并发数 字段:gw_configure_api.max_thread
     *
     * @param maxThread the value for gw_configure_api.max_thread, 入口流量的最大并发数
     */
    public void setMaxThread(Long maxThread) {
        this.maxThread = maxThread;
    }

    /**
     * 获取 0:不校验，1：校验 字段:gw_configure_api.sign_check
     *
     * @return gw_configure_api.sign_check, 0:不校验，1：校验
     */
    public Integer getSignCheck() {
        return signCheck;
    }

    /**
     * 设置 0:不校验，1：校验 字段:gw_configure_api.sign_check
     *
     * @param signCheck the value for gw_configure_api.sign_check, 0:不校验，1：校验
     */
    public void setSignCheck(Integer signCheck) {
        this.signCheck = signCheck;
    }

    /**
     * 获取 0：mock_response报文，1：待发布，2：已发布 字段:gw_configure_api.status
     *
     * @return gw_configure_api.status, 0：mock_response报文，1：待发布，2：已发布
     */
    public Integer getStatus() {
        return status;
    }

    /**
     * 设置 0：mock_response报文，1：待发布，2：已发布 字段:gw_configure_api.status
     *
     * @param status the value for gw_configure_api.status, 0：mock_response报文，1：待发布，2：已发布
     */
    public void setStatus(Integer status) {
        this.status = status;
    }

    /**
     * 获取 0-未删除,1-已删除 字段:gw_configure_api.delete_flag
     *
     * @return gw_configure_api.delete_flag, 0-未删除,1-已删除
     */
    public Boolean getDeleteFlag() {
        return deleteFlag;
    }

    /**
     * 设置 0-未删除,1-已删除 字段:gw_configure_api.delete_flag
     *
     * @param deleteFlag the value for gw_configure_api.delete_flag, 0-未删除,1-已删除
     */
    public void setDeleteFlag(Boolean deleteFlag) {
        this.deleteFlag = deleteFlag;
    }

    /**
     * 获取 操作人 字段:gw_configure_api.operator
     *
     * @return gw_configure_api.operator, 操作人
     */
    public String getOperator() {
        return operator;
    }

    /**
     * 设置 操作人 字段:gw_configure_api.operator
     *
     * @param operator the value for gw_configure_api.operator, 操作人
     */
    public void setOperator(String operator) {
        this.operator = operator == null ? null : operator.trim();
    }

    /**
     * 获取 更新时间 字段:gw_configure_api.update_time
     *
     * @return gw_configure_api.update_time, 更新时间
     */
    public Date getUpdateTime() {
        return updateTime;
    }

    /**
     * 设置 更新时间 字段:gw_configure_api.update_time
     *
     * @param updateTime the value for gw_configure_api.update_time, 更新时间
     */
    public void setUpdateTime(Date updateTime) {
        this.updateTime = updateTime;
    }

    /**
     * 获取 创建时间 字段:gw_configure_api.create_time
     *
     * @return gw_configure_api.create_time, 创建时间
     */
    public Date getCreateTime() {
        return createTime;
    }

    /**
     * 设置 创建时间 字段:gw_configure_api.create_time
     *
     * @param createTime the value for gw_configure_api.create_time, 创建时间
     */
    public void setCreateTime(Date createTime) {
        this.createTime = createTime;
    }
}